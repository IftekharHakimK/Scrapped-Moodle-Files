**General Structure

===
DECLARE
	<declarative section, optional>
	--variables are declared here

BEGIN
	<executable section>
	--processing statements are written here

EXCEPTION
	<exception code, optional>
	--exception handling codes are written here if any
END ;
===

1. Anonymous Block
------------------
*Every statement in a block ends with a semi-colon (;)

To view output from SQL_PlUS:
SET SERVEROUTPUT ON

===
BEGIN
	DBMS_OUTPUT.PUT_LINE('Hello World') ;
END ;
/
===

===
DECLARE
	ENAME VARCHAR2(100) ;
BEGIN
	SELECT (FIRST_NAME ||' '|| LAST_NAME) INTO ENAME
	FROM HR.EMPLOYEES
	WHERE EMPLOYEE_ID = 100 ;
	
	DBMS_OUTPUT.PUT_LINE('The name is: ' || ENAME) ;
END ;
/
===
* INTO keyword used to store value from SELECT statement into PL/SQL variable

===
DECLARE
    EMPNAME VARCHAR2(64);
    JDATE DATE;
    MONTHS NUMBER;
BEGIN
    SELECT FIRST_NAME||' '||LAST_NAME, HIRE_DATE INTO EMPNAME, JDATE FROM HR.EMPLOYEES WHERE EMPLOYEE_ID = 100;
    
	MONTHS := ROUND(MONTHS_BETWEEN(SYSDATE, JDATE),0);
    
	DBMS_OUTPUT.PUT_LINE('EMPLOYEE '||EMPNAME||' WORKED FOR '|| MONTHS || ' MONTHS');
END;
/
===
* := is correct, : = is incorrect

2. IF-ELSE Block

You can now process conditions, and perform your queries in multiple steps.
-- Key advantage of PL/SQL

===
IF condition THEN
	Statements ;
[ ELSIF condition THEN
	Statements ; ]
[ ELSE
	Statements ; ]
END IF ;
===

===
DECLARE
    EMPNAME VARCHAR2(64);
    JDATE DATE;
    MONTHS NUMBER;
    YEARS NUMBER;
BEGIN
    SELECT FIRST_NAME||' '||LAST_NAME, HIRE_DATE INTO EMPNAME, JDATE FROM HR.EMPLOYEES WHERE EMPLOYEE_ID = 100;
    MONTHS := ROUND(MONTHS_BETWEEN(SYSDATE, JDATE),0);
    YEARS := ROUND(MONTHS/12,0);
    
    IF YEARS>10 THEN
        DBMS_OUTPUT.PUT_LINE('EMPLOYEE WORKED MORE THAN 10 YEARS');
    ELSE
        DBMS_OUTPUT.PUT_LINE('EMPLOYEE WORKED LESS THAN 10 YEARS');
    END IF;
    
END;
/
===

===
DECLARE
    EMPNAME VARCHAR2(64);
    JDATE DATE;
    MONTHS NUMBER;
    YEARS NUMBER;
BEGIN
    SELECT FIRST_NAME||' '||LAST_NAME, HIRE_DATE INTO EMPNAME, JDATE FROM HR.EMPLOYEES WHERE EMPLOYEE_ID = 100;
    MONTHS := ROUND(MONTHS_BETWEEN(SYSDATE, JDATE),0);
    YEARS := ROUND(MONTHS/12,0);
    
    IF YEARS>15 THEN
        DBMS_OUTPUT.PUT_LINE('EMPLOYEE IS SENIOR');
    ELSIF YEARS<5 THEN
        DBMS_OUTPUT.PUT_LINE('EMPLOYEE IS JUNIOR');
    ELSE
        DBMS_OUTPUT.PUT_LINE('EMPLOYEE IS NEITHER SENIOR NOR JUNIOR');
    END IF;
    
END;
/
===

3. Comments
Like other programming languages, you can use comments.
Better use these to enhance readability of your pl/sql blocks.

===
--This is a single-line comment
/*
This is a multi-line
Comment.
*/
===

===
DECLARE
    EMPNAME VARCHAR2(64); --STORE EMPLOYEE NAME
    JDATE DATE; -- STORE JOINING DATE
    MONTHS NUMBER; -- VAR FOR CALCULATING MONTHS
    YEARS NUMBER; -- VAR FOR CALCULATING YEARS
BEGIN
    /*
        THIS PROGRAM IS A DEMO OF USING IF-THEN-ELSE
        IN PL/SQL ANONYMOUS BLOCK
    */
    SELECT FIRST_NAME||' '||LAST_NAME, HIRE_DATE INTO EMPNAME, JDATE FROM HR.EMPLOYEES WHERE EMPLOYEE_ID = 100;
    MONTHS := ROUND(MONTHS_BETWEEN(SYSDATE, JDATE),0);
    YEARS := ROUND(MONTHS/12,0);
    
    IF YEARS>15 THEN
        DBMS_OUTPUT.PUT_LINE('EMPLOYEE IS SENIOR');
    ELSIF YEARS<5 THEN
        DBMS_OUTPUT.PUT_LINE('EMPLOYEE IS JUNIOR');
    ELSE
        DBMS_OUTPUT.PUT_LINE('EMPLOYEE IS NEITHER SENIOR NOR JUNIOR');
    END IF;
    
END;
/
===

4. Exception Handling

Without exception handling:
===
DECLARE
    EMPNAME VARCHAR2(64); --STORE EMPLOYEE NAME
    JDATE DATE; -- STORE JOINING DATE
    MONTHS NUMBER; -- VAR FOR CALCULATING MONTHS
    YEARS NUMBER; -- VAR FOR CALCULATING YEARS
BEGIN
    /*
        THIS PROGRAM IS A DEMO OF USING IF-THEN-ELSE
        IN PL/SQL ANONYMOUS BLOCK
    */
    SELECT FIRST_NAME||' '||LAST_NAME, HIRE_DATE INTO EMPNAME, JDATE FROM HR.EMPLOYEES WHERE EMPLOYEE_ID = 1000;
    MONTHS := ROUND(MONTHS_BETWEEN(SYSDATE, JDATE),0);
    YEARS := ROUND(MONTHS/12,0);
    
    IF YEARS>15 THEN
        DBMS_OUTPUT.PUT_LINE('EMPLOYEE IS SENIOR');
    ELSIF YEARS<5 THEN
        DBMS_OUTPUT.PUT_LINE('EMPLOYEE IS JUNIOR');
    ELSE
        DBMS_OUTPUT.PUT_LINE('EMPLOYEE IS NEITHER SENIOR NOR JUNIOR');
    END IF;
END;
/
===


With exception handling:
===
DECLARE
    EMPNAME VARCHAR2(64); --STORE EMPLOYEE NAME
    JDATE DATE; -- STORE JOINING DATE
    MONTHS NUMBER; -- VAR FOR CALCULATING MONTHS
    YEARS NUMBER; -- VAR FOR CALCULATING YEARS
BEGIN
    /*
        THIS PROGRAM IS A DEMO OF USING IF-THEN-ELSE
        IN PL/SQL ANONYMOUS BLOCK
    */
    SELECT FIRST_NAME||' '||LAST_NAME, HIRE_DATE INTO EMPNAME, JDATE FROM HR.EMPLOYEES WHERE EMPLOYEE_ID = 1000;
    MONTHS := ROUND(MONTHS_BETWEEN(SYSDATE, JDATE),0);
    YEARS := ROUND(MONTHS/12,0);
    
    IF YEARS>15 THEN
        DBMS_OUTPUT.PUT_LINE('EMPLOYEE IS SENIOR');
    ELSIF YEARS<5 THEN
        DBMS_OUTPUT.PUT_LINE('EMPLOYEE IS JUNIOR');
    ELSE
        DBMS_OUTPUT.PUT_LINE('EMPLOYEE IS NEITHER SENIOR NOR JUNIOR');
    END IF;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('NO DATA FOUND');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('UNKNOWN ERROR');
END;
/
===

Common Exceptions:
+NO_DATA_FOUND 
	When a SELECT INTO statement cannot retrieve a row.
+TOO_MANY_ROWS 
	When a SELECT INTO statement retrieves more than one row.
+DUP_VAL_ON_INDEX
	When duplicate values are attempted to be stored in a table column with unique index.
+NVALID_NUMBER
	When the conversion of a character string into a number fails because the string does not represent a valid number.
+VALUE_ERROR
	When an arithmetic, conversion, truncation, or size-constraint error occurs.
+ZERO_DIVIDE 
	When an attempt is made to divide a number by zero.
	
5. What Next? --Loops!
Syntax:
===
FOR variable in lowest val..highest val
LOOP
	Statement1 ;
	Statement2 ;
	…
END LOOP ;
===

Print 1 to 100
===
DECLARE
BEGIN
	FOR i in 1..100
	LOOP
		DBMS_OUTPUT.PUT_LINE(i);
	END LOOP ;
End ;
/
===

While Loop
===
WHILE Condition
LOOP
	Statement1 ;
	Statement2 ;
	…
END LOOP ;
===

Display 1 to 100
===
DECLARE
    i NUMBER;
BEGIN
    i :=1;
    WHILE i<=100
    LOOP
        DBMS_OUTPUT.PUT_LINE(i);
        i := i+1;
    END LOOP;
End ;
/
===

Unconditional loops: see from the reference

But, these are not why we will use loops in PL/SQL

A Use Case:
	-- iterating/computing on multiple row returned by a query
	--> Cursor

6. Cursor

===
FOR variable in (SELECT statement)
LOOP
	Statement1 ;
	Statement2 ;
	…
END LOOP ;
===

* Add 1% commission for the employees who get more than the overall average salary.

** Privilege issue in live sql
===
DECLARE
    OLD_COM_PCT NUMBER;
    NEW_COM_PCT NUMBER;
BEGIN
    FOR R IN (SELECT EMPLOYEE_ID, SALARY FROM HR.EMPLOYEES WHERE SALARY>(SELECT AVG(SALARY) FROM HR.EMPLOYEES))
    LOOP
        SELECT COMMISSION_PCT INTO OLD_COM_PCT FROM HR.EMPLOYEES WHERE EMPLOYEE_ID = R.EMPLOYEE_ID;

        NEW_COM_PCT := 1.01*OLD_COM_PCT;
        
        UPDATE HR.EMPLOYEES SET COMMISSION_PCT = NEW_COM_PCT WHERE EMPLOYEE_ID = R.EMPLOYEE_ID;
        
        --Check whether the transaction is reflected
        DBMS_OUTPUT.PUT_LINE(OLD_COM_PCT);
        
        SELECT COMMISSION_PCT INTO OLD_COM_PCT FROM HR.EMPLOYEES WHERE EMPLOYEE_ID = R.EMPLOYEE_ID;
        
        DBMS_OUTPUT.PUT_LINE(OLD_COM_PCT);
    END LOOP;
END;
/
===

*Only columns retrieved in select are available inside loop
===
--Find the number of employees working for more than 10 years
DECLARE
    N NUMBER;
    YEARS NUMBER;
BEGIN
    N :=0;
    FOR R IN (SELECT EMPLOYEE_ID, HIRE_DATE FROM HR.EMPLOYEES)
    LOOP
        YEARS := ROUND(MONTHS_BETWEEN(SYSDATE,R.HIRE_DATE)/12,0);
        IF YEARS>10 THEN
            N := N+1;
        END IF;
    END LOOP;
    
    DBMS_OUTPUT.PUT_LINE('Number of employees working for more than 10 years: '||N);
END;
/
===

7. Procedure

==
CREATE OR REPLACE PROCEDURE IS_SENIOR_EMPLOYEE(EID IN VARCHAR2) IS
	JDATE DATE ;
	YEARS NUMBER ;
BEGIN
	SELECT HIRE_DATE INTO JDATE
	FROM EMPLOYEES
	WHERE EMPLOYEE_ID = EID ;
	YEARS := (MONTHS_BETWEEN(SYSDATE, JDATE) / 12) ;
	IF YEARS >= 10 THEN
		DBMS_OUTPUT.PUT_LINE('The employee worked 10 years or more') ;
		ELSE
		DBMS_OUTPUT.PUT_LINE('The employee worked less than 10 years') ;
	END IF ;
END ;
/
===

Call procedure from PL/SQL block

===
DECLARE
BEGIN
	IS_SENIOR_EMPLOYEE(100) ;
	IS_SENIOR_EMPLOYEE(105) ;
END ;
===

*Output from procedure

===
CREATE OR REPLACE PROCEDURE IS_SENIOR_EMPLOYEE(EID IN VARCHAR2, MSG OUT VARCHAR2)
IS
	JDATE DATE ;
	YEARS NUMBER ;
BEGIN
	SELECT HIRE_DATE INTO JDATE
	FROM EMPLOYEES
	WHERE EMPLOYEE_ID = EID ;
	YEARS := (MONTHS_BETWEEN(SYSDATE, JDATE) / 12) ;
	IF YEARS >= 10 THEN
		MSG := 'The employee worked 10 years or more' ;
	ELSE
		MSG := 'The employee worked less than 10 years' ;
	END IF ;
EXCEPTION
	WHEN NO_DATA_FOUND THEN
		MSG := 'No employee found.' ;
	WHEN TOO_MANY_ROWS THEN
		MSG := 'More than one employee found.' ;
	WHEN OTHERS THEN
		MSG := 'Some unknown error occurred.' ;
===	
	
use it in PL/SQL block

===
DECLARE
MESSAGE VARCHAR2(100) ;
BEGIN
	IS_SENIOR_EMPLOYEE(10000, MESSAGE) ;
	DBMS_OUTPUT.PUT_LINE(MESSAGE) ;
	IS_SENIOR_EMPLOYEE(105, MESSAGE) ;
	DBMS_OUTPUT.PUT_LINE(MESSAGE) ;
END ;	
===


8. Function

===
CREATE OR REPLACE FUNCTION GET_SENIOR_EMPLOYEE(EID IN VARCHAR2)
RETURN VARCHAR2 IS
	JDATE DATE ;
	YEARS NUMBER ;
	MSG VARCHAR2(100) ;
BEGIN
	SELECT HIRE_DATE INTO JDATE
	FROM EMPLOYEES
	WHERE EMPLOYEE_ID = EID ;
	YEARS := (MONTHS_BETWEEN(SYSDATE, JDATE) / 12) ;
	IF YEARS >= 10 THEN
		MSG := 'The employee worked 10 years or more' ;
	ELSE
		MSG := 'The employee worked less than 10 years' ;
	END IF ;
	RETURN MSG ; --return the message
EXCEPTION
--you must return value from this section also
	WHEN NO_DATA_FOUND THEN
		RETURN 'No employee found.' ;
	WHEN TOO_MANY_ROWS THEN
		RETURN 'More than one employee found.' ;
	WHEN OTHERS THEN
		RETURN 'Some unknown error occurred.' ;
END ;
/
===

*Use it in PL/SQL

===
DECLARE
	MESSAGE VARCHAR2(100) ;
BEGIN
	MESSAGE := GET_SENIOR_EMPLOYEE(10000) ;
	DBMS_OUTPUT.PUT_LINE(MESSAGE) ;
	MESSAGE := GET_SENIOR_EMPLOYEE(105) ;
	DBMS_OUTPUT.PUT_LINE(MESSAGE) ;
	END ;
/
===

*Use it in query

===
SELECT employee_id, GET_SENIOR_EMPLOYEE(employee_id)
from employees
===


9. Trigger
Automatically call when a change in database occurs

*structure

+ trigger name 
+ before/after insert/delete/update
+ of column_name
+ on table_name 
+ when condition
+ [for each row] for row level, default statement level

row level triggers, if n rows are updated => n times call
statement level => 1 time call only


===
CREATE TABLE STUDENTS(
STUDENT_NAME VARCHAR2(250),
CGPA NUMBER
) ;

CREATE OR REPLACE TRIGGER HELLO_WORLD
AFTER INSERT
ON STUDENTS
DECLARE
BEGIN
DBMS_OUTPUT.PUT_LINE('Hello World');
END ;
/

INSERT INTO STUDENTS VALUES ('Fahim Hasan', 3.71);
INSERT INTO STUDENTS VALUES ('Ahmed Nahiyan', 3.80);
===

If a new employee is recorded in database, update max salary and min salary

* Statement Level
===
CREATE OR REPLACE TRIGGER DEMO_TRIGGER 
AFTER INSERT
ON HR.EMPLOYEES
DECLARE
    MX_SAL NUMBER;
    MIN_SAL NUMBER;
    
    OLD_MAX_SAL NUMBER;
    OLD_MIN_SAL NUMBER;
BEGIN
    FOR R IN (SELECT DISTINCT JOB_ID FROM HR.JOBS)
    LOOP
        SELECT MAX(SALARY), MIN(SALARY) INTO MX_SAL, MIN_SAL FROM HR.EMPLOYEES WHERE JOB_ID = R.JOB_ID;
    
        SELECT MAX_SALARY, MIN_SALARY INTO OLD_MAX_SAL, OLD_MIN_SAL FROM HR.JOBS WHERE JOB_ID = R.JOB_ID;
        
        IF OLD_MAX_SAL<>MX_SAL THEN
            UPDATE HR.JOBS SET MAX_SALARY = MX_SAL WHERE JOB_ID = R.JOB_ID;
        END IF;
        
        IF OLD_MIN_SAL<>MIN_SAL THEN
            UPDATE HR.JOBS SET MIN_SALARY = MIN_SAL WHERE JOB_ID = R.JOB_ID;
        END IF;
    END LOOP;
    
END;
/
===



Study on this from booklets
------------------------------------------
BEFORE trigger vs. AFTER trigger 
ROW LEVEL trigger vs. STATEMENT LEVEL trigger
References :OLD vs. :NEW for a ROW LEVEL trigger
